// This file is @generated by prost-build.
/// / 消息对象
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Msg {
    /// 发送者id
    #[prost(string, tag = "1")]
    pub send_id: ::prost::alloc::string::String,
    /// 接收者id
    #[prost(string, tag = "2")]
    pub receiver_id: ::prost::alloc::string::String,
    /// 消息的本地id，用来更新已发送消息的状态和server_id
    #[prost(string, tag = "3")]
    pub local_id: ::prost::alloc::string::String,
    /// 消息的服务端id
    #[prost(string, tag = "4")]
    pub server_id: ::prost::alloc::string::String,
    /// timestamp时间戳
    #[prost(int64, tag = "5")]
    pub create_time: i64,
    /// 发送时间，由服务端生成
    #[prost(int64, tag = "6")]
    pub send_time: i64,
    /// 消息序列化，用来保证消息的可靠性和消息的有序行
    #[prost(int64, tag = "7")]
    pub seq: i64,
    /// 消息类型
    #[prost(enumeration = "MsgType", tag = "8")]
    pub msg_type: i32,
    /// 消息内容类型
    #[prost(enumeration = "ContentType", tag = "9")]
    pub content_type: i32,
    /// 消息内容
    #[prost(string, tag = "10")]
    pub content: ::prost::alloc::string::String,
    /// 已读状态
    #[prost(bool, tag = "11")]
    pub is_read: bool,
}
/// 消息内容类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentType {
    Default = 0,
    Text = 1,
    Error = 2,
}
impl ContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ContentType::Default => "Default",
            ContentType::Text => "Text",
            ContentType::Error => "Error",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Default" => Some(Self::Default),
            "Text" => Some(Self::Text),
            "Error" => Some(Self::Error),
            _ => None,
        }
    }
}
/// 消息类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    SingleMsg = 0,
    MsgRecResp = 1,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MsgType::SingleMsg => "MsgTypeSingleMsg",
            MsgType::MsgRecResp => "MsgRecResp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MsgTypeSingleMsg" => Some(Self::SingleMsg),
            "MsgRecResp" => Some(Self::MsgRecResp),
            _ => None,
        }
    }
}
